# environment variables
export LANG=ja_JP.UTF-8

# Keybind configuration
bindkey -e
bindkey "^u" backward-kill-line
bindkey "^[[1~" beginning-of-line # Home gets to line head
bindkey "^[[4~" end-of-line       # End gets to line end
bindkey "^[[3~" delete-char       # Del
bindkey "\e[1;5C" forward-word    # ctrl-right
bindkey "\e[1;5D" backward-word   # ctrl-left
#bindkey '^\' undo
#bindkey '^[\' redo
bindkey "\e[Z" reverse-menu-complete # reverse menu completion binded to Shift-Tab

# historical backward/forward search with linehead string binded to ^P/^N
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward

## terminal configuration
case "${TERM}" in
screen)
    TERM=xterm
    ;;
esac

# set terminal title including current directory
case "${TERM}" in
xterm|xterm-color|kterm|kterm-color)
    precmd() {
        echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
    }
    ;;
esac

##############################################################

## Alias configuration
#setopt complete_aliases     # expand aliases before completing

## Command history configuration
HISTFILE=${HOME}/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data
setopt extended_history     # zsh の開始, 終了時刻をヒストリファイルに書き込む
setopt hist_ignore_space    # コマンドラインの先頭がスペースで始まる場合ヒストリに追加しない
setopt hist_no_store        # history (fc -l) コマンドをヒストリリストから取り除く

# auto directory pushd that you can get dirs list by cd -[tab]
setopt auto_pushd
setopt pushd_ignore_dups

## 出力の文字列末尾に改行コードが無い場合でも表示
unsetopt promptcr
## 色を使う
setopt prompt_subst
## ビープを鳴らさない
setopt nobeep
# no beep sound when complete list displayed
setopt nolistbeep
## 内部コマンド jobs の出力をデフォルトで jobs -l にする
setopt long_list_jobs
## 補完候補一覧でファイルの種別をマーク表示
setopt list_types
## サスペンド中のプロセスと同じコマンド名を実行した場合はリジューム
setopt auto_resume
## 補完候補を一覧表示
setopt auto_list
## TAB で順に補完候補を切り替える
setopt auto_menu
## =command を command のパス名に展開する
setopt equals
## --prefix=/usr などの = 以降も補完
setopt magic_equal_subst
## ヒストリを呼び出してから実行する間に一旦編集
setopt hist_verify
## ファイル名の展開で辞書順ではなく数値的にソート
setopt numeric_glob_sort
## 出力時8ビットを通す
setopt print_eight_bit
## ディレクトリ名だけで cd
setopt auto_cd
## カッコの対応などを自動的に補完
setopt auto_param_keys
## ファイル名の展開でディレクトリにマッチした場合末尾に / を付加する
setopt mark_dirs
## ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt auto_param_slash
## スペルチェック
setopt correct
## {a-c} を a b c に展開する機能を使えるようにする
setopt brace_ccl
## Ctrl+S/Ctrl+Q によるフロー制御を使わないようにする
setopt NO_flow_control
## 補完候補を詰めて表示
setopt list_packed
## 最後のスラッシュを自動的に削除しない => auto-fu追加につき無効化
#setopt noautoremoveslash


# assuming that coreutils package is installed on OSX
case "${OSTYPE}" in
freebsd*|darwin*)
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
    ;;
esac


## Completion configuration
case "${OSTYPE}" in
freebsd*|darwin*)
    fpath=($(brew --prefix)/share/zsh/site-functions ${fpath})
    ;;
linux*)
    fpath=(${HOME}/.zsh/functions/Completion ${fpath})
    ;;
esac
fpath[1,0]=~/.zsh/completion/
autoload -Uz compinit
compinit -u

## 補完候補、ls出力の色づけ
if [ -f /usr/share/dircolors/dircolors.ansi-universal ]; then
    eval "$(dircolors /usr/share/dircolors/dircolors.ansi-universal)"
else
    export LS_COLORS='no=00:fi=00:di=36:ln=35:pi=30;44:so=35;44:do=35;44:bd=33;44:cd=37;44:or=05;37;41:mi=05;37;41:ex=01;31:*.cmd=01;31:*.exe=01;31:*.com=01;31:*.bat=01;31:*.reg=01;31:*.app=01;31:*.txt=32:*.org=32:*.md=32:*.mkd=32:*.h=32:*.hpp=32:*.c=32:*.C=32:*.cc=32:*.cpp=32:*.cxx=32:*.objc=32:*.cl=32:*.sh=32:*.bash=32:*.csh=32:*.zsh=32:*.el=32:*.vim=32:*.java=32:*.pl=32:*.pm=32:*.py=32:*.rb=32:*.hs=32:*.php=32:*.htm=32:*.html=32:*.shtml=32:*.erb=32:*.haml=32:*.xml=32:*.rdf=32:*.css=32:*.sass=32:*.scss=32:*.less=32:*.js=32:*.coffee=32:*.man=32:*.0=32:*.1=32:*.2=32:*.3=32:*.4=32:*.5=32:*.6=32:*.7=32:*.8=32:*.9=32:*.l=32:*.n=32:*.p=32:*.pod=32:*.tex=32:*.go=32:*.sql=32:*.csv=32:*.sv=32:*.svh=32:*.v=32:*.vh=32:*.vhd=32:*.bmp=33:*.cgm=33:*.dl=33:*.dvi=33:*.emf=33:*.eps=33:*.gif=33:*.jpeg=33:*.jpg=33:*.JPG=33:*.mng=33:*.pbm=33:*.pcx=33:*.pdf=33:*.pgm=33:*.png=33:*.PNG=33:*.ppm=33:*.pps=33:*.ppsx=33:*.ps=33:*.svg=33:*.svgz=33:*.tga=33:*.tif=33:*.tiff=33:*.xbm=33:*.xcf=33:*.xpm=33:*.xwd=33:*.xwd=33:*.yuv=33:*.aac=33:*.au=33:*.flac=33:*.m4a=33:*.mid=33:*.midi=33:*.mka=33:*.mp3=33:*.mpa=33:*.mpeg=33:*.mpg=33:*.ogg=33:*.opus=33:*.ra=33:*.wav=33:*.anx=33:*.asf=33:*.avi=33:*.axv=33:*.flc=33:*.fli=33:*.flv=33:*.gl=33:*.m2v=33:*.m4v=33:*.mkv=33:*.mov=33:*.MOV=33:*.mp4=33:*.mp4v=33:*.mpeg=33:*.mpg=33:*.nuv=33:*.ogm=33:*.ogv=33:*.ogx=33:*.qt=33:*.rm=33:*.rmvb=33:*.swf=33:*.vob=33:*.webm=33:*.wmv=33:*.doc=31:*.docx=31:*.rtf=31:*.odt=31:*.dot=31:*.dotx=31:*.ott=31:*.xls=31:*.xlsx=31:*.ods=31:*.ots=31:*.ppt=31:*.pptx=31:*.odp=31:*.otp=31:*.fla=31:*.psd=31:*.7z=1;35:*.apk=1;35:*.arj=1;35:*.bin=1;35:*.bz=1;35:*.bz2=1;35:*.cab=1;35:*.deb=1;35:*.dmg=1;35:*.gem=1;35:*.gz=1;35:*.iso=1;35:*.jar=1;35:*.msi=1;35:*.rar=1;35:*.rpm=1;35:*.tar=1;35:*.tbz=1;35:*.tbz2=1;35:*.tgz=1;35:*.tx=1;35:*.war=1;35:*.xpi=1;35:*.xz=1;35:*.z=1;35:*.Z=1;35:*.zip=1;35:*.ANSI-30-black=30:*.ANSI-01;30-brblack=01;30:*.ANSI-31-red=31:*.ANSI-01;31-brred=01;31:*.ANSI-32-green=32:*.ANSI-01;32-brgreen=01;32:*.ANSI-33-yellow=33:*.ANSI-01;33-bryellow=01;33:*.ANSI-34-blue=34:*.ANSI-01;34-brblue=01;34:*.ANSI-35-magenta=35:*.ANSI-01;35-brmagenta=01;35:*.ANSI-36-cyan=36:*.ANSI-01;36-brcyan=01;36:*.ANSI-37-white=37:*.ANSI-01;37-brwhite=01;37:*.log=01;32:*~=01;32:*#=01;32:*.bak=01;36:*.BAK=01;36:*.old=01;36:*.OLD=01;36:*.org_archive=01;36:*.off=01;36:*.OFF=01;36:*.dist=01;36:*.DIST=01;36:*.orig=01;36:*.ORIG=01;36:*.swp=01;36:*.swo=01;36:*,v=01;36:*.gpg=34:*.gpg=34:*.pgp=34:*.asc=34:*.3des=34:*.aes=34:*.enc=34:*.sqlite=34:';
fi
export ZLS_COLORS=$LS_COLORS
if [ -n "$LS_COLORS" ]; then
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
fi

# そのまま補完、小文字->大文字にして補完、大文字->小文字にして補完を順に試す
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' '+m:{A-Z}={a-z}'


# Make prompt like the following (PROMPT is underlined)
# [2015-06-26 14:20:23] $                   [~/code]
PROMPT="%U%B[%D{%Y-%m-%d %H:%M:%S}] %(?..{%?} )%(!.#.$)%b%u "
RPROMPT="[%50<...<%~]"


# autojump
if [ -f /usr/share/autojump/autojump.zsh ]; then
    source /usr/share/autojump/autojump.zsh
fi


# global aliases
alias -g L='| less'
alias -g G='| grep'
if which pbcopy >/dev/null 2>&1 ; then
    alias -g C='| ruby -e "STDOUT << STDIN.read.chomp" | pbcopy'
elif which xsel >/dev/null 2>&1 ; then
    alias -g C='| ruby -e "STDOUT << STDIN.read.chomp" | xsel --input --clipboard'
elif which putclip >/dev/null 2>&1 ; then
    alias -g C='| ruby -e "STDOUT << STDIN.read.chomp" | putclip'
fi

# aliases
alias ls='ls -F --color=auto'
alias la='ls -al'
alias grep="grep -n --color=auto"
alias sl='ls'
alias du="du -h"
alias df="df -h"
alias vi='vim'
alias emnw='emacsclient -nw'
alias en='emacsclient -nw'
e() {
    emacsclient -c -F '((background-color . "black") (foreground-color . "white") (alpha 75 50))' $* &
}
emc() {
    emacsclient -n $* && xdotool key "super+e"
}

alias temp='cd ~/temp'
alias conf='cd ~/code/conffiles'

alias cdu='cd ..'
alias cduu='cd ../..'
alias cduuu='cd ../../..'
alias cduuuu='cd ../../../..'
alias cduuuuu='cd ../../../../..'

case "${OSTYPE}" in
linux*)
    alias open='xdg-open'
    ;;
cygwin*)
    alias open='cygstart'
    ;;
esac
alias o='open'

alias genpw='echo -n $(pwgen 20 -1) | xsel --input --clipboard'

# git utilities
alias gst='git status'
alias gbr='git branch'
alias gbra='git branch -a'
alias glog='git log'
alias glog1='git log --oneline'
alias gdiff='git diff'
alias gdiffc='git diff --cached'
alias ggrep='git grep -n'
alias gcherry='git cherry -v'
ghash() { git rev-parse ${1-HEAD}; }
compdef _git ghash=git-rev-parse

alias gci='git commit'
alias gco='git checkout'
alias gadd='git add'
alias gpick='git cherry-pick'
alias gfetch='git fetch --prune'
alias gmtool='git mergetool'
alias gsubup='git submodule update'
gpush() {
    local branch=$(git rev-parse --abbrev-ref HEAD)
    git push origin $branch:$branch
}
gpushf() {
    local branch=$(git rev-parse --abbrev-ref HEAD)
    git push --force-with-lease origin $branch:$branch
}


########## environment variables
export PATH=~/bin:$PATH


########## Programming
# asdf
case "${OSTYPE}" in
freebsd*|darwin*)
  # We could use `brew --prefix asdf` to obtain the path but it's too slow; let's hardcode the result.
  source /usr/local/opt/asdf/asdf.sh
  source /usr/local/opt/asdf/share/zsh/site-functions/_asdf
  ;;
linux*)
  source $HOME/.asdf/asdf.sh
  source $HOME/.asdf/completions/asdf.bash
  ;;
esac

# Ruby
alias irb='irb -r irb/completion'
export PATH=/usr/local/heroku/bin:$PATH

# Haskell
export PATH=~/.cabal/bin:~/.local/bin:$PATH

# Idris
export PATH=~/code/Idris/install/.cabal-sandbox/bin:$PATH

# Agda
export PATH=~/code/Agda/install/.cabal-sandbox/bin:$PATH

# PureScript (purerl)
export PATH=~/code/PureScript/purescript/.stack-work/install/x86_64-linux/lts-6.25/7.10.3/bin:$PATH

# Clojure
cljrun() { java -cp ~/.lein/self-installs/leiningen-*.jar clojure.main $* }

# Scala
export PATH=~/code/Scala/scala/bin:~/code/Scala/sbt/bin:$PATH

# Android
export ANDROID_SDK_ROOT=/usr/local/share/android-sdk

# Go
export GOPATH=$HOME/code/Go
export PATH=$PATH:$GOPATH/bin:$GOROOT/bin:$GOPATH/go_appengine:$GOPATH/google-cloud-sdk/bin

# Rust
export PATH=$PATH:$HOME/.cargo/bin

# Pony
alias ponyc='$HOME/code/pony/ponyc/build/release/ponyc'

# Elixir
alias iexm='iex -S mix'
export ERL_AFLAGS="-kernel shell_history enabled"


########## OS-specific settings
case "${OSTYPE}" in
linux*)
    # disable screen lock by C-s
    if [ -t 0 ]; then
        stty -ixon
    fi
    ;;
esac


########## completion cache
fpath[1,0]=~/.zsh/completion
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache


########## incremental completion by auto-fu
source ~/code/conffiles/zsh/auto-fu/auto-fu.zsh
zle-line-init() { auto-fu-init; }; zle -N zle-line-init
zstyle ':completion:*' completer _oldlist _complete
zle -N zle-keymap-select auto-fu-zle-keymap-select

zstyle ':auto-fu:var' postdisplay ''
zstyle ':auto-fu:highlight' completion fg=green,bold,underline
zstyle ':auto-fu:highlight' completion/one fg=green,bold,underline
zstyle ':auto-fu:var' autoable-function/skiplines "?" "rake*" "scp*"

afu-accept-line-with-clearing() {
    afu-clearing-maybe
    ((afu_in_p == 1)) && { afu_in_p=0; BUFFER="$buffer_cur"; }
    zle afu+accept-line
}
zle -N afu-accept-line-with-clearing
bindkey -M afu "^M" afu-accept-line-with-clearing
bindkey -M afu "^J" afu-accept-line-with-clearing

compinit


########## percol (taken from README.md of percol)
exists() { which $1 &> /dev/null }
if exists percol; then
    percol_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }
    zle -N percol_select_history
    bindkey -M afu '^R' percol_select_history

    percol_select_dir_under_current() {
        local buffer="$(find . -maxdepth 1 -type d | tail -n+2 | sed -e 's/^\.\///' | percol)"
        [ -z $buffer ] || { echo; cd $buffer }
        zle reset-prompt
    }
    zle -N percol_select_dir_under_current
    bindkey -M afu '^T' percol_select_dir_under_current
fi

########## direnv_rust
_direnv_rust_hook() {
  eval "$(DYLD_INSERT_LIBRARIES= direnv_rust)"
}
add-zsh-hook chpwd _direnv_rust_hook
_direnv_rust_hook # invoke the hook once on startup of zsh


########## automatically run ls (note that this should come after alias ls='...')
ls_as_a_function() { ls }
add-zsh-hook chpwd ls_as_a_function


########## https://github.com/sickill/stderred
export STDERRED_ESC_CODE=$(tput setaf 3)
case "${OSTYPE}" in
freebsd*|darwin*)
    export DYLD_INSERT_LIBRARIES="/usr/local/lib/libstderred.dylib${DYLD_INSERT_LIBRARIES:+:$DYLD_INSERT_LIBRARIES}"
    ;;
linux*)
    source /usr/share/stderred/stderred.sh
    ;;
esac
