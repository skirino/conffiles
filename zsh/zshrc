
# environment variables
export LANG=ja_JP.UTF-8
export LESSCHARSET=utf-8

# Keybind configuration
bindkey -e
bindkey "^u" backward-kill-line
bindkey "^[[3~" delete-char       # Del
bindkey "\e[1;5C" forward-word    # ctrl-right
bindkey "\e[1;5D" backward-word   # ctrl-left

# historical backward/forward search with linehead string bound to ^P/^N
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward

## terminal configuration
case "${TERM}" in
screen)
  TERM=xterm
  ;;
esac

# set terminal title including current directory
case "${TERM}" in
xterm|xterm-color|kterm|kterm-color)
  precmd() {
    echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
  }
  ;;
esac

##############################################################

## Alias configuration
#setopt complete_aliases     # expand aliases before completing

## Command history configuration
HISTFILE=${HOME}/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data
setopt extended_history     # zsh の開始, 終了時刻をヒストリファイルに書き込む
setopt hist_ignore_space    # コマンドラインの先頭がスペースで始まる場合ヒストリに追加しない
setopt hist_no_store        # history (fc -l) コマンドをヒストリリストから取り除く

# auto directory pushd that you can get dirs list by cd -[tab]
setopt auto_pushd
setopt pushd_ignore_dups

## 出力の文字列末尾に改行コードが無い場合でも表示
unsetopt promptcr
## 色を使う
setopt prompt_subst
## ビープを鳴らさない
setopt nobeep
# no beep sound when complete list displayed
setopt nolistbeep
## 内部コマンド jobs の出力をデフォルトで jobs -l にする
setopt long_list_jobs
## 補完候補一覧でファイルの種別をマーク表示
setopt list_types
## サスペンド中のプロセスと同じコマンド名を実行した場合はリジューム
setopt auto_resume
## 補完候補を一覧表示
setopt auto_list
## TAB で順に補完候補を切り替える
setopt auto_menu
## =command を command のパス名に展開する
setopt equals
## --prefix=/usr などの = 以降も補完
setopt magic_equal_subst
## ヒストリを呼び出してから実行する間に一旦編集
setopt hist_verify
## ファイル名の展開で辞書順ではなく数値的にソート
setopt numeric_glob_sort
## 出力時8ビットを通す
setopt print_eight_bit
## ディレクトリ名だけで cd
setopt auto_cd
## カッコの対応などを自動的に補完
setopt auto_param_keys
## ファイル名の展開でディレクトリにマッチした場合末尾に / を付加する
setopt mark_dirs
## ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt auto_param_slash
## スペルチェック
setopt correct
## {a-c} を a b c に展開する機能を使えるようにする
setopt brace_ccl
## Ctrl+S/Ctrl+Q によるフロー制御を使わないようにする
setopt NO_flow_control
## 補完候補を詰めて表示
setopt list_packed
## 最後のスラッシュを自動的に削除しない => auto-fu追加につき無効化
#setopt noautoremoveslash


# assuming that coreutils package is installed on OSX
case "${OSTYPE}" in
freebsd*|darwin*)
  #export PATH="/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/findutils/libexec/gnubin:/usr/local/opt/gnu-tar/libexec/gnubin:/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
  #export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:/usr/local/opt/findutils/libexec/gnuman:/usr/local/opt/gnu-tar/libexec/gnuman:/usr/local/opt/gnu-sed/libexec/gnuman:$MANPATH"
  ;;
esac

## Completion configuration
case "${OSTYPE}" in
freebsd*|darwin*)
  fpath=(/usr/local/share/zsh/site-functions ${fpath})
  # fpath=($(brew --prefix)/share/zsh/site-functions ${fpath})
  ;;
linux*)
  fpath=(${HOME}/.zsh/functions/Completion ${fpath})
  ;;
esac
fpath[1,0]=~/.zsh/completion/
autoload -Uz compinit

########## incremental completion by auto-fu
conf_zsh_dir=$(dirname $(realpath "$0"))
source "${conf_zsh_dir}/auto-fu/auto-fu.zsh"
zle-line-init() { auto-fu-init; }; zle -N zle-line-init
zstyle ':completion:*' completer _oldlist _complete
zle -N zle-keymap-select auto-fu-zle-keymap-select

zstyle ':auto-fu:var' postdisplay ''
zstyle ':auto-fu:highlight' completion fg=green,bold,underline
zstyle ':auto-fu:highlight' completion/one fg=green,bold,underline
zstyle ':auto-fu:var' autoable-function/skiplines "?" "rake*" "scp*"

afu-accept-line-with-clearing() {
  afu-clearing-maybe
  ((afu_in_p == 1)) && { afu_in_p=0; BUFFER="$buffer_cur"; }
  zle afu+accept-line
}
zle -N afu-accept-line-with-clearing
bindkey -M afu "^M" afu-accept-line-with-clearing
bindkey -M afu "^J" afu-accept-line-with-clearing

compinit -uC

########## completion cache
fpath[1,0]=~/.zsh/completion
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

## 補完候補、ls出力の色づけ
if [ -f /usr/share/dircolors/dircolors.ansi-universal ]; then
  eval "$(dircolors /usr/share/dircolors/dircolors.ansi-universal)"
else
  export LS_COLORS='no=00:fi=00:di=36:ln=35:pi=30;44:so=35;44:do=35;44:bd=33;44:cd=37;44:or=05;37;41:mi=05;37;41:ex=01;31'
fi
export ZLS_COLORS=$LS_COLORS
if [ -n "$LS_COLORS" ]; then
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
fi

# そのまま補完、小文字->大文字にして補完、大文字->小文字にして補完を順に試す
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' '+m:{A-Z}={a-z}'


# Make prompt like the following (PROMPT is underlined)
# [2015-06-26 14:20:23] $                   [~/code] 2s
if [ -v GITPOD_WORKSPACE_ID ]; then
  PROMPT='%F{green}%U%B[%D{%Y-%m-%d %H:%M:%S}]%f %(?..{%?} )%(!.#.$)%b%u '
  RPROMPT_BASE='[%50<...<%~]'
else
  PROMPT='%U%B[%D{%Y-%m-%d %H:%M:%S}] %(?..{%?} )%(!.#.$)%b%u '
  RPROMPT_BASE='[%50<...<%~]'
fi

preexec() {
  seconds_last_exec="${SECONDS}"
}

function precmd() {
  local time_taken="$(($SECONDS - ${seconds_last_exec:-$SECONDS}))"
  RPROMPT="${RPROMPT_BASE} ${time_taken}s"
}

# global aliases
alias -g L='| less'
alias -g G='| grep'
if which pbcopy >/dev/null 2>&1 ; then
  alias -g C='| ruby -e "STDOUT << STDIN.read.chomp" | pbcopy'
elif which xsel >/dev/null 2>&1 ; then
  alias -g C='| ruby -e "STDOUT << STDIN.read.chomp" | xsel --input --clipboard'
elif which putclip >/dev/null 2>&1 ; then
  alias -g C='| ruby -e "STDOUT << STDIN.read.chomp" | putclip'
fi

# aliases
alias ls='ls -F --color=auto'
alias la='ls -al'
alias grep="grep --color=auto"
alias sl='ls'
alias du="du -h"
alias df="df -h"
alias vi='vim'
alias en='emacsclient -nw'
alias e='emacsclient -nw'

alias cdu='cd ..'
alias cduu='cd ../..'
alias cduuu='cd ../../..'
alias cduuuu='cd ../../../..'
alias cduuuuu='cd ../../../../..'

if [ -d ~/temp ]; then
  alias temp='cd ~/temp'
fi
if [ -d ~/code/conffiles ]; then
  alias conf='cd ~/code/conffiles'
fi
if [ -d ~/.dotfiles ]; then
  alias conf='cd ~/.dotfiles'
fi
if [ -d /workspace/monorepo ]; then
  alias mr='cd /workspace/monorepo'
fi

case "${OSTYPE}" in
linux*)
  alias open='xdg-open'
  ;;
cygwin*)
  alias open='cygstart'
  ;;
esac
alias o='open'

alias genpw='echo -n $(pwgen 20 -1) | xsel --input --clipboard'

# git utilities
alias gst='git status'
alias gbr='git branch'
alias gbra='git branch -a'
alias glog='git log'
alias glog1='git log --oneline'
alias gdiff='git diff'
alias gdiffc='git diff --cached'
alias ggrep='git grep -n'
alias gcherry='git cherry -v'
ghash() { git rev-parse ${1-HEAD}; }

alias gci='git commit'
alias gco='git checkout'
alias gsw='git switch'
alias gswi='git switch $(git branch | grep -v "^* " | peco)'
alias gbrdi='git branch -D $(git branch | grep -v "^* " | peco)'
gswic() {
  local branch=$(git branch -a | grep "^  remotes\/origin\/" | sed 's|^  remotes/origin/||' | peco)
  git switch -c "${branch}" "origin/${branch}"
}
alias gadd='git add'
alias gpick='git cherry-pick'
alias gfetch='git fetch --prune'
alias gmtool='git mergetool'
alias gsubup='git submodule update'
gpush() {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  git push origin $branch:$branch
}
gpushf() {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  git push --force-with-lease origin $branch:$branch
}


# bazel
if [ -v GITPOD_WORKSPACE_ID ]; then
  b() {
    bazel "$@" --config=gitpod
  }
else
  alias b='bazel'
fi


########## environment variables
export PATH=~/bin:$PATH


########## Programming
# asdf
case "${OSTYPE}" in
freebsd*|darwin*)
  # We could use `brew --prefix asdf` to obtain the path but it's too slow; let's hardcode the result.
  source /usr/local/opt/asdf/asdf.sh
  source /usr/local/opt/asdf/share/zsh/site-functions/_asdf
  ;;
linux*)
  source $HOME/.asdf/asdf.sh
  source $HOME/.asdf/completions/_asdf
  ;;
esac

# Scala
#export PATH=~/code/Scala/scala/bin:~/code/Scala/sbt/bin:$PATH

# Rust
export PATH=$PATH:$HOME/.cargo/bin

# Pony
alias ponyc=$HOME/code/pony/bin/ponyc

# Elixir
alias iexm='iex -S mix'
export ERL_AFLAGS="-kernel shell_history enabled"


########## OS-specific settings
case "${OSTYPE}" in
linux*)
  # disable screen lock by C-s
  if [ -t 0 ]; then
    stty -ixon
  fi
  ;;
esac


########## direnv_rust
if command -v direnv_rust > /dev/null; then
  _direnv_rust_hook() {
    eval "$(DYLD_INSERT_LIBRARIES= direnv_rust)"
  }
  add-zsh-hook chpwd _direnv_rust_hook
  _direnv_rust_hook # invoke the hook once on startup of zsh
fi

########## automatically run ls (note that this should come after alias ls='...')
ls_as_a_function() { ls }
add-zsh-hook chpwd ls_as_a_function


########## https://github.com/sickill/stderred
export STDERRED_ESC_CODE=$(tput setaf 3)
case "${OSTYPE}" in
freebsd*|darwin*)
  #export DYLD_INSERT_LIBRARIES="/usr/local/lib/libstderred.dylib${DYLD_INSERT_LIBRARIES:+:$DYLD_INSERT_LIBRARIES}"
  ;;
linux*)
  if [ -f /usr/share/stderred/stderred.sh ]; then
    source /usr/share/stderred/stderred.sh
  fi
  ;;
esac
